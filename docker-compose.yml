version: '3.7'

services:
  nginx:
    build: ./auction_web_api/nginx
    volumes:
      - static:/static
    ports:
      - "80:80"
    depends_on:
      - django_gunicorn

  django_gunicorn:
    volumes:
      - static:/static
      - ./auction_web_api/db.sqlite3:/app/db.sqlite3  # Bind-mount the local SQLite file to the container
    build:
      context: ./auction_web_api
      dockerfile: Dockerfile
    ports:
      - "8000:8000"

  celery:
    container_name: celery
    build:
      context: ./auction_web_api
      dockerfile: Dockerfile.celery
    command: celery --app=auction_web_api worker -l DEBUG
    volumes:
      - static:/static
      - ./auction_web_api/db.sqlite3:/app/db.sqlite3  # Bind-mount the same local SQLite file here

    environment:
      - DEBUG=1
    depends_on:
      - redis

  celery-beat:
    build: 
      context: ./auction_web_api
      dockerfile: Dockerfile.celery
    command: celery -A auction_web_api beat -l INFO --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - ./auction_web_api/:/usr/src/app/
      - ./auction_web_api/db.sqlite3:/app/db.sqlite3  # Bind-mount the local SQLite file to the container
    environment:
      - DEBUG=1
      - SECRET_KEY=dbaa1_i7%*3r9-=z-+_mz4r-!qeed@(-a_r(g@k8jo8y3r27%m
      - DJANGO_ALLOWED_HOSTS=localhost 127.0.0.1 [::1]
    depends_on:
      - redis

  redis:
    image: redis:7-alpine

  auction-frontend:
    build:
      context: ./auction-website-frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"  # Maps port 3000 on the host to port 3000 in the container
    volumes:
      - .:/app  # Mounts the current directory to /app in the container for live reloading (optional)
    environment:
      - NODE_ENV=production  # Set environment variables if needed

volumes:
  static:
  sqlite-data:  # Define the volume for SQLite database
